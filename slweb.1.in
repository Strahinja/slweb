'\"
.\" Manpage for slweb(1)
.
.mso an-ext.tmac
.de CDS
.EX
.RS \\$1
.sp 1
..
.de CDE
.sp 1
.RE
.EE
..
.
.TH SLWEB "1" "%DATE%" "slweb %VERSION%" "General Commands Manual"
.SH NAME
slweb \- Simple static website generator
.
.SH SYNOPSIS
.
.SY slweb
.OP "\-h \fR|\fP \-\-help"
.YS
.
.SY slweb
.OP "\-v \fR|\fP \-\-version"
.YS
.
.SY slweb
.OP "\-b \fR|\fP \-\-body-only"
.OP "\-d \fR|\fP \-\-basedir" directory
.RI [ filename ]
.YS
.
.SH COPYRIGHT
slweb Copyright \(co 2020, 2021 Strahinya Radich.
.br
This program is licensed under GNU GPL v3 or later. See the file
.I LICENSE
in the slweb repository for details.
.
.SH DESCRIPTION
.B Slweb
is a static website generator which aims at being simplistic. It transforms 
custom Markdown-like syntax into
.SM HTML.
.
.SH OPTIONS
.
.TP
.B \-b
.TQ
.B \-\-body\-only
.br
Only add the contents of the \fC<body>\fP tag, skipping \fC<html>\fP and
\fC<head>\fP.
.
.TP
.BI \-d " directory"
.TQ
.BI \-\-basedir " directory"
.br
Set the base directory as a reference point to normalize paths in includes (the
argument to
.B --relative-to
option for the
.BR realpath (1)
command). Defaults to the current directory.
.
.TP
.B \-h
.TQ
.B \-\-help
.br
Print this usage information screen.
.
.TP
.B \-v
.TQ
.B \-\-version
.br
Print program version and exit.
.
.SH REFERENCE
.
.LP
Files processed by
.B slweb
are using a minimal subset of Markdown with added directives.  
.
.SS Supported Markdown features
.
.IP \[bu]
.BR Backticks .
Text inside \fC`backticks`\fP will be put inside \fC<code></code>\fP. Text
inside triple backticks (\fC```\fP) will be put inside \fC<pre></pre>\fP. Any
\[lq]less-than\[rq] character will be converted to \fC&lt;\fP.
.
.IP \[bu]
.BR Blockquotes .
Starting the line with \fC>\fP will surround it with a \fC<blockquote>\fP tag.
Multiple lines are supported.
.
.IP \[bu]
.BR Bold/italic .
Text inside \fC*asterisks*\fP or \fC_underlines_\fP will be put inside
\fC<em></em>\fP. Text inside \fC**double asterisks**\fP or \fC__double
underlines__\fP will be put inside \fC<strong></strong>\fP. \fC***More than
two*** of the ___same symbol___\fP should be avoided.
.
.IP \[bu]
.BR Headings .
A line starting with \fC#\fP followed by space will be put inside
\fC<h?></h?>\fP, where \fC?\fP stands for 1-4, depending on the number of
hash signs.
.
.IP \[bu]
.BR Images .
Similar to links (see
.BR Links ), 
images can be added by using:
.
.CDS 8
![Some title](/path/to/image.png)
.CDE
.
.IP
Which will produce:
.
.CDS 8
<a href="/path/to/image.png" title="Some title" 
    class="image" target="_blank"><img src="/path/to/image.png" 
    alt="Some title" /></a>
.CDE
.
.IP
If the additional link is not desirable, it can be turned off by setting
.B add-image-links
to \[lq]0\[rq].
.
.IP \[bu]
.BR "Keyboard tags" .
Text inside \fC||double bars||\fP will be put inside \fC<kbd></kbd>\fP tags. As
with backticks, any \[lq]less-than\[rq] character will be converted to
\fC&lt;\fP.
.
.IP \[bu]
.BR "Line breaks" .
Two spaces followed by a newline will become \fC<br />\fP.
.
.IP \[bu]
.BR Links .
The construct \fC[A link](https://example.com)\fP will be converted into \fC<a
href="https://example.com">A link</a>\fP.
.
.IP
Special case is the form \fC[=somemacro Link title](https://anything)\fP which
prepends the body of a macro
.I somemacro
into the \fC<a></a>\fP tag (here broken into multiple lines for clarity):
.
.CDS 8
<a href="https://anything">
<!-- contents of somemacro -->
Link title</a>
.CDE
.
.IP
This can, for example, be used to add
.SM SVG
icons to links. See
.BR Macros .
.
.IP
Also, the form \fC[(Link title)](http://asite.com)\fP will surround the link
title (text between \fC<a></a>\fP tags) with \fC<span></span>\fP, like so:
.
.CDS 8
<a href="http://asite.com"><span>Link title</span></a>
.CDE
.
.IP
This allows for separate styling of link text. It can be combined with the
macro-form:
.
.CDS 8
[=somemacro (Link title)](http://asite.com)
.CDE
.
.IP
It will prepend the body of a macro
.I somemacro
outside of the \fC<span></span>\fP:
.
.CDS 8
<a href="http://asite.com">
<!-- contents of somemacro -->
<span>Link title</span></a>
.CDE
.
.IP \[bu]
.BR Lists .
Lines starting with a dash (\fC\-\fP) will start an unordered list (if used for
the first time) and start a list item. Input:
.
.CDS 8
Colors are:

- Red
- Green
- Blue

and so on.
.CDE
.
.IP
will produce:
.
.CDS 8
<p>Colors are:</p>

<ul>
<li><p>Red
</p></li>
<li><p>Green
</p></li>
<li><p>Blue</p>
</li></ul>
<p>And so on.</p>
.CDE
.
.IP
Indenting a line after a blank line with four spaces will create a paragraph
within the list item, otherwise it will end the list:
.
.CDS 8
- This is a text inside a list item.

    Remarkably, this paragraph is as well.
- This is already a second item.

This is after the list.
.CDE
.
.IP
will produce:
.
.CDS 8
<ul>
<li><p>This is a text inside a list item.</p>
<p>Remarkably, this paragraph is as well.
</p></li>
<li><p>This is already a second item.</p></li></ul>
<p>This is after the list.</p>
.CDE
.
.IP \[bu] 4
.BR Paragraphs .
Text surrounded by newlines will be put inside \fC<p></p>\fP tags.
.
.SS Directives
.
.IP \[bu] 4
.BR "Brand \[lq]watermark\[rq]" .
Directive \fC{made-by}\fP is converted into a div with the id \fCmade-by\fP
containing the \[lq]watermark\[rq] text and a link to the
.B slweb
home page.
.
.IP \[bu]
.BR "CSV templating" .
Directive \fC{csv "csvfile"}{/csv}\fP marks a template. Whatever is between
\fC{csv}\fP and \fC{/csv}\fP will be processed by
.B slweb
and collected as a template. Then, file \fIcsvfile.csv\fP will be read and for
each of its lines the collected template will be output, substituting each
occurence of a register mark \fC$\f[CI]n\fR (where \fIn\fP is between 1 and 9,
inclusive) with the corresponding 
.SM CSV 
field of the read line.
.SM CSV
file needs to use semicolons (;) or commas (,) as delimiters (or set
.B csv-delimiter 
as a
.SM YAML
variable in the calling
.I .slw
file) and double quotation marks (") as field boundaries. First line in the
.SM CSV
file is parsed as a header and associated with register marks \fC$#1\fP to
\fC$#9\fP.  The symbol $ is represented as \fC$$\fP.
.
.IP "" 8
For example, having a file \fIsales.csv\fP:
.
.CDS 8
"Item";"Q1 2020";"Q2 2020";"Q3 2020";"Q4 2020"
"Toothpick";"15.2";"12";"16.4";"10"
"Teapot";"1.2";"2";"5";"3.5"
.CDE
.
.IP "" 4
We can write
.
.CDS 8
{csv "sales"}
{.sales-segment}
$#1 {q}$1{/q} sales by quarter for the last year in 
thousands of units sold (for $$) were as follows:
{.q1}$2{/.q1} {.q2}$3{/.q2} 
{.q3}$4{/.q3} {.q4}$5{/.q4}
{/.sales-segment}
{/csv}
.CDE
.
.IP "" 4
to get:
.
.CDS 8
<div class="sales-segment">
Item <q>Toothpick</q> sales by quarter for the last year in 
thousands of units sold (for $) were as follows:
<div class="q1">15.2</div> <div class="q2">12</div> 
<div class="q3">16.4</div> <div class="q4">10</div>
</div>
<div class="sales-segment">
Item <q>Teapot</q> sales by quarter for the last year in 
thousands of units sold (for $) were as follows:
<div class="q1">1.2</div> <div class="q2">2</div> 
<div class="q3">5</div> <div class="q4">3.5</div>
</div>
.CDE
.
.IP "" 4
.SM CSV
directives can't be nested and doing so will produce an error.
.
.IP \[bu] 4
.BR "General tags" .
Directive \fC{sometag}{/sometag}\fP will be transformed into
\fC<sometag></sometag>\fP.
.
.RS
.IP \- 4
.BR "Class attributes" .
Directive \fC{tag.myclass mysecondclass}{/tag}\fP will be transformed into
\fC<tag class="myclass mysecondclass"></tag>\fP. Only one class attribute is
permitted per tag directive (subsequent dots will be inserted as part of the
\fCclass\fP attribute), but you can include multiple classes by separating them
with a space, just like in
.SM HTML,
and you can have both a class attribute and an id attribute per tag.

A variation of this is to use a special form \fC{.myclass}{/.myclass}\fP, which
will be transformed into \fC<div class="myclass"></div>\fP.
.
.IP \-
.BR "Id attributes" .
Directive \fC{tag#myid}{/tag}\fP will be transformed into \fC<tag
id="myid"></tag>\fP. Only one id attribute is permitted per tag directive
(subsequent hash signs will be included as part of the \fCid\fP attribute), and
you can have both an id attribute and a class attribute per tag.

A variation of this is to use a special form \fC{#myid}{/#myid}\fP, which will
be transformed into \fC<div id="myid"></div>\fP.
.RE
.
.IP \[bu]
.BR Includes .
Directive \fC{include "somefile"}\fP will fork, parse
.I somefile.slw
(related to
.IR basedir )
and output the resulting
.SM HTML
as if the option \fC\-\-body\-only\fP was specified. All macros and
.SM YAML
variables will be preserved.
.
.IP \[bu]
.BR Macros .
Macros can be declared using the directive \fC{=macroname}{/=macroname}\fP,
where
.I macroname
is the name of the macro. Anything between those two tags will then become the
body of a macro. Whenever \fC{=macroname}\fP is subsequently encountered in the
file, it will be replaced by the macro body. Macro definitions can't be nested
nor can they contain macro calls, and doing so will produce an error.
.
.IP \[bu]
.BR "Subdirectory inclusion (blogging directive)" .
The command \fC{incdir "\fIdirname\fC" \fInum\fC =\fImacroname\fC}\fP
.RI ( num
and
.I macroname
are optional) will be expanded as follows:
.
.RS
.nr list 1 1
.IP \n[list]. 4
A \fC<ul class="incdir">\fP tag will be inserted into the document instead of
the directive.
.
.IP \n+[list].
For every subdirectory of
.IR dirname , 
relative to current directory and up to
.I num
(if present) or 5 (if omitted) total subdirectories, a \fC<li>\fP
tag will be inserted into the \fCul\fP tag.
.
.IP \n+[list].
A \fC<details>\fP tag will be inserted into each \fC<li>\fP tag.
.
.IP \n+[list].
Inside the \fC<details>\fP tag, a \fC<summary>\fP tag will be inserted with the
name of the subdirectory. If
.I macroname
is present, the name of the subdirectory will be prepended with the body of a
macro
.I macroname
(for example, this can be used to include custom
.SM SVG
markup as arrows).
.
.IP \n+[list].
After the \fC<summary>\fP tag a \fC<div>\fP tag will be inserted into
\fC<details>\fP, containing the concatenated output from processing each of the
.I .slw
files inside that subdirectory in reverse lexicographical order, in a manner
similar to the
.I include
directive. (See
.BR Includes " and " date ", " ext-in-permalink ", " permalink-url ", " 
.BR samedir-permalink " variables.)"
.RE
.
.IP \[bu]
.BR "Previous Git commit information" .
Directive \fC{git-log}\fP is converted into a div with the id \fCgit-log\fP
containing the information about the previous commit (as having information
about the current commit would be impossible).
.
.SS Special YAML variables
.
.IP \[bu] 4
.BR add-image-links .
If set to \[lq]0\[rq], links around images will not be added (otherwise they
will by default, see
.BR Images ).
.
.IP \[bu]
.BR csv-delimiter .
Changes the delimiter used for 
.I .csv
file parsing. By default, this will be a semicolon\~(;). See
.BR "CSV templating" .
.
.IP \[bu]
.BR date .
If present, this variable, assumed to be in
.SM ISO
8601
.SM UTC
datetime format, will be parsed to determine the timestamp in permalinks
generated by the
.I incdir
directive. The actual values used depend on the source-level constant
.IR timestamp_format .
.
.IP \[bu]
.BR ext-in-permalink .
If set to \[lq]0\[rq], permalinks generated by the
.I incdir
directive will not have the extension included in the
.I href
attribute. For example, instead of \fCblog/2020/august.html\fP, the resulting
permalink will have \fCblog/2020/august\fP. 
.
.IP \[bu]
.BR favicon-url .
if present, this
.SM URL
will be used as a favicon
.SM URL
instead of the default, \fC/favicon.ico\fP.
.
.IP \[bu]
.BR permalink-url .
If present, this
.SM URL
will completely replace the link used in the
.I href
attribute of permalinks generated by the
.I incdir
directive. This variable is more useful in individual
.I .slw
files inside the subdirectories of the
.I dirname
provided to the
.I incdir
directive.
.
.IP \[bu]
.BR samedir-permalink .
If set to \[lq]1\[rq], path in the permalink generated by the presence of
.I date 
variable will be converted (with
.BR realpath (1))
to be relative to the directory containing the input file. Otherwise, directory
in the permalink will remain unchanged.
.
.IP \[bu]
.BR site-desc .
The contents of this variable will be inserted as the value of the
.I content
attribute of the \fC<meta name="description">\fP tag.
.
.IP \[bu]
.BR site-name .
The contents of this variable will be inserted inside the \fC<title></title>\fP
tags.
.
.IP \[bu]
.BR stylesheet .
The contents of this variable will be treated as a
.SM CSS
file name to be included using the \fC<link rel="stylesheet" />\fP tag. You can
have more than one 
.I stylesheet
declaration per 
.I .slw
file.
.
.IP \[bu]
.BR title .
If present, contents of this variable will be prepended to the body as a heading
with the level determined by the 
.I title-heading-level 
variable, defaulting
to 2.  (\fCtitle: Some title\fP  becomes  \fC<h2>Some title</h2>\fP).
.
.IP \[bu]
.BR title-heading-level .
See
.BR title .
.
.SS Special macros
.
.IP \[bu] 4
.BR permalink .
If present, the body of this macro will be inserted into permalinks generated by
the
.I incdir
directive, similar to the macro-form of links.
.
.SH "SEE ALSO"
.BR sed (1)
.
.SH EXAMPLES
.
.LP
Given the file \fCindex.slw\fP in the current directory:
.CDS 4
---
site-name: Test website
site-desc: My first website in slweb
---

{main}
# Hello world

This is an _example_ of a statically generated HTML.

{/main}
.CDE
after using the command:
.CDS 4
$ slweb index.slw > index.html
.CDE
file \fCindex.html\fP contains:
.CDS 4
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Test website</title>
    <meta charset="utf8" />
    <meta name="description" content="My first website in slweb" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content="slweb" />
</head>
<body>

<main>
<h1>Hello world</h1>

<p>This is an <em>example</em> of a statically generated HTML.</p>

</main>
</body>
</html>
.CDE
.
.SH "KNOWN LIMITATIONS"
.
.IP \[bu] 4
Currently there is no way to determine where the paragraph inside a tag should
begin and end without adding blank lines or using the \fC{p}{/p}\fP notation.
For example, the code
.
.CDS 8
{tag}
First paragraph

Second paragraph
{/tag}
.CDE
.
.IP
will produce
.
.CDS 8
<tag>
First paragraph

<p>Second paragraph
</tag></p>
.CDE
.
.IP
You can suppress the paragraph starting/ending tags by prepending blank lines
with a backslash, like this:
.
.CDS 8
{tag}
First paragraph
\[rs]
Second paragraph
{/tag}
.CDE
.
.IP
which will produce
.
.CDS 8
<tag>
First paragraph

Second paragraph
</tag>
.CDE
.
.IP
Adding blank lines helps, if paragraphs are desired:
.
.CDS 8
{tag}

First paragraph

Second paragraph

{/tag}
.CDE
.
.IP
will produce
.
.CDS 8
<tag>
<p>First paragraph</p>

<p>Second paragraph</p>
</tag>
.CDE
.
.SH BUGS
.
.LP
Bugs can be reported using the Github issue tracker at:
.UR https://\:github.com/\:Strahinja/\:slweb/\:issues
.UE
.\" vim: set filetype=groff:

